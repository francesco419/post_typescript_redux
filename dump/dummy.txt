/*------------------Main 1.4.5 lazy,suspense----------------------------------*/
/*   return (
    <div className={styles["page-main"]}>
      <Header />
      {loading ? (
        <div className={styles["slide-box"]}>
          <div className={styles["slidetest"]}>
            <div id="slide-hidden-right" className={styles["slide-hidden"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[0]} />
              </React.Suspense>
            </div>
            <div id="slide-left" className={styles["slide-left"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[1]} />
              </React.Suspense>
            </div>
            <button
              id="slide-left-btn"
              className={styles["btn-slide-left"]}
              onClick={(e) => {
                const btnRight = document.getElementById(
                  "slide-right-btn"
                ) as HTMLButtonElement | null;
                const btnLeft = document.getElementById(
                  "slide-left-btn"
                ) as HTMLButtonElement | null;
                btnRight.disabled = true;
                btnLeft.disabled = true;
                move("slide-left", "move-slideO");
                move("slide-middle", "move-slideL");
                move("slide-right", "move-slideR");
                move("slide-hidden-left", "move-slideH");
                setTimeout(() => {
                  dispatch(moveCounter(true));
                  //asArray(true);
                  btnRight.disabled = false;
                  btnLeft.disabled = false;
                }, 500);
              }}
            >
              <ArrowtoLeft />
            </button>
            <div id="slide-middle" className={styles["slide-middle"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[2]} />
              </React.Suspense>
            </div>
            <button
              id="slide-right-btn"
              className={styles["btn-slide-right"]}
              onClick={(e) => {
                const btnRight = document.getElementById(
                  "slide-right-btn"
                ) as HTMLButtonElement | null;
                const btnLeft = document.getElementById(
                  "slide-left-btn"
                ) as HTMLButtonElement | null;
                btnRight.disabled = true;
                btnLeft.disabled = true;
                move("slide-hidden-right", "move-Hslide");
                move("slide-left", "move-Oslide");
                move("slide-middle", "move-Lslide");
                move("slide-right", "move-Rslide");
                console.log(window.innerWidth);
                setTimeout(() => {
                  dispatch(moveCounter(true));
                  //asArray(false);
                  btnRight.disabled = false;
                  btnLeft.disabled = false;
                }, 500);
              }}
            >
              <ArrowtoRight />
            </button>
            <div id="slide-right" className={styles["slide-right"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[3]} />
              </React.Suspense>
            </div>
            <div id="slide-hidden-left" className={styles["slide-hidden"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[4]} />
              </React.Suspense>
            </div>
          </div>
        </div>
      ) : (
        <h1>Loading</h1>
      )}
    </div>
  );
} */

  const asArray = (bool: boolean) => {
    if (bool) {
      let arr = [...number];
      let temp: number = arr.shift();
      arr.push(temp);
      setNumber((number) => arr);
    } else {
      let arr = [...number];
      let temp: number = arr.pop();
      arr.unshift(temp);
      setNumber((number) => arr);
    }
  };

  --------------------------------------------------------------

<--------profilepost--------->
  const handleimageClick = (
    e: React.MouseEvent<HTMLButtonElement, MouseEvent>
  ) => {
    let img = new Image();
    let temp: number;
    let fixedHeight: number;
    let cnt: number = 1;
    if (!e.currentTarget.value) {
      console.log(1);
      return;
    }
    const src: string = e.currentTarget.value;
    const exist: string = (document.getElementById(id_hid) as HTMLImageElement)
      .src;
    const overflow = document.getElementById(id_id);
    console.log(src + " : " + exist + " : " + overflow);
    if (exist === src) {
      if (!overflow && !exist) {
        console.log(2);
        return;
      }
      console.log(3);
      img.src = exist;
      if (img.height <= 500) {
        temp = img.height;
        fixedHeight = img.height;
      } else {
        fixedHeight = 500;
        temp = 500;
      }
      setInterval(
        () => {
          if (101 !== cnt) {
            overflow.style.maxHeight = `${
              fixedHeight - (fixedHeight / 100) * cnt
            }px`;
            cnt++;
            temp -= fixedHeight / 100;
          }
        },
        cnt === 101 ? null : 3
      );
      setTimeout(() => {
        (document.getElementById(id_hid) as HTMLImageElement).src =
          "http://localhost:3000/profile";
        overflow.style.display = "none";
        overflow.style.maxHeight = `580px`;
      }, 500);
    } else {
      if (exist !== "http://localhost:3000/profile") {
        (document.getElementById(id_hid) as HTMLImageElement).src = src;
        console.log(4);
        return;
      }
      (document.getElementById(id_hid) as HTMLImageElement).src = src;
      if (!overflow && !src) {
        console.log(5);
        return;
      }
      console.log(6);
      overflow.style.maxHeight = "0px";
      overflow.style.display = "block";
      img.src = src;
      if (img.height <= 500) {
        temp = img.height + 80;
        fixedHeight = img.height / 100;
      } else {
        fixedHeight = 5;
        temp = 500 + 80;
      }
      let limit: number = temp / fixedHeight;
      const timer = setInterval(
        () => {
          if (cnt < limit) {
            overflow.style.maxHeight = `${fixedHeight * cnt}px`;
            cnt++;
          } else {
            clearInterval(timer);
          }
        },
        cnt < limit ? null : 3
      );
    }
  };

  const handlehideClick = () => {
    let img = new Image();
    let temp: number;
    let fixedHeight: number;
    let cnt: number = 1;
    const overflow = document.getElementById(id_id) as HTMLDivElement;
    const src = (document.getElementById(id_hid) as HTMLImageElement).src;

    if (overflow && src) {
      img.src = src;
      if (img.height <= 500) {
        temp = img.height;
        fixedHeight = img.height;
      } else {
        fixedHeight = 500;
        temp = 500;
      }
      setInterval(
        () => {
          if (101 !== cnt) {
            console.log(`${fixedHeight - (fixedHeight / 100) * cnt}px`);
            overflow.style.maxHeight = `${
              fixedHeight - (fixedHeight / 100) * cnt
            }px`;
            cnt++;
            temp -= fixedHeight / 100;
          }
        },
        cnt === 101 ? null : 3
      );
    }
    setTimeout(() => {
      (document.getElementById(id_hid) as HTMLImageElement).src =
        "http://localhost:3000/profile";
      overflow.style.display = "none";
      overflow.style.maxHeight = `580px`;
    }, 500);
  };