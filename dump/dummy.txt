/*------------------Main 1.4.5 lazy,suspense----------------------------------*/
/*   return (
    <div className={styles["page-main"]}>
      <Header />
      {loading ? (
        <div className={styles["slide-box"]}>
          <div className={styles["slidetest"]}>
            <div id="slide-hidden-right" className={styles["slide-hidden"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[0]} />
              </React.Suspense>
            </div>
            <div id="slide-left" className={styles["slide-left"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[1]} />
              </React.Suspense>
            </div>
            <button
              id="slide-left-btn"
              className={styles["btn-slide-left"]}
              onClick={(e) => {
                const btnRight = document.getElementById(
                  "slide-right-btn"
                ) as HTMLButtonElement | null;
                const btnLeft = document.getElementById(
                  "slide-left-btn"
                ) as HTMLButtonElement | null;
                btnRight.disabled = true;
                btnLeft.disabled = true;
                move("slide-left", "move-slideO");
                move("slide-middle", "move-slideL");
                move("slide-right", "move-slideR");
                move("slide-hidden-left", "move-slideH");
                setTimeout(() => {
                  dispatch(moveCounter(true));
                  //asArray(true);
                  btnRight.disabled = false;
                  btnLeft.disabled = false;
                }, 500);
              }}
            >
              <ArrowtoLeft />
            </button>
            <div id="slide-middle" className={styles["slide-middle"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[2]} />
              </React.Suspense>
            </div>
            <button
              id="slide-right-btn"
              className={styles["btn-slide-right"]}
              onClick={(e) => {
                const btnRight = document.getElementById(
                  "slide-right-btn"
                ) as HTMLButtonElement | null;
                const btnLeft = document.getElementById(
                  "slide-left-btn"
                ) as HTMLButtonElement | null;
                btnRight.disabled = true;
                btnLeft.disabled = true;
                move("slide-hidden-right", "move-Hslide");
                move("slide-left", "move-Oslide");
                move("slide-middle", "move-Lslide");
                move("slide-right", "move-Rslide");
                console.log(window.innerWidth);
                setTimeout(() => {
                  dispatch(moveCounter(true));
                  //asArray(false);
                  btnRight.disabled = false;
                  btnLeft.disabled = false;
                }, 500);
              }}
            >
              <ArrowtoRight />
            </button>
            <div id="slide-right" className={styles["slide-right"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[3]} />
              </React.Suspense>
            </div>
            <div id="slide-hidden-left" className={styles["slide-hidden"]}>
              <React.Suspense fallback="Loading...">
                <LazyAbout num={counter[4]} />
              </React.Suspense>
            </div>
          </div>
        </div>
      ) : (
        <h1>Loading</h1>
      )}
    </div>
  );
} */

  const asArray = (bool: boolean) => {
    if (bool) {
      let arr = [...number];
      let temp: number = arr.shift();
      arr.push(temp);
      setNumber((number) => arr);
    } else {
      let arr = [...number];
      let temp: number = arr.pop();
      arr.unshift(temp);
      setNumber((number) => arr);
    }
  };

  --------------------------------------------------------------
